---
- name: Build DRBD RPMs for Multiple Kernel Versions
  hosts: all
  become: yes
  vars:
    el_minor_version: "5"
    docker_image_name: "drbd-builder"
    docker_container_name: "drbd-builder"
    output_directory: "/root/output"
    ansible_user: ali

  tasks:
    - name: Ensure required packages for Docker are installed
      yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present
      tags: docker_install

    - name: Remove old Docker packages
      yum:
        name:
          - docker
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent
      tags: docker_install

    - name: Add Docker repository
      command: >
        yum-config-manager --add-repo
        https://download.docker.com/linux/centos/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo
      tags: docker_install

    - name: Enable Docker CE stable repository
      command: yum-config-manager --enable docker-ce-stable
      tags: docker_install

    - name: Install Docker Engine
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: latest
      tags: docker_install

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: docker_install

    - name: Add user to the Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      tags: docker_install

    - name: Create build directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "/root/build"
        - "/root/build/scripts"
      tags: build_setup

    - name: Copy build files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - { src: 'Dockerfile', dest: '/root/build/Dockerfile', mode: '0644' }
        - { src: 'scripts/build-drbd.sh', dest: '/root/build/scripts/build-drbd.sh', mode: '0755' }
        - { src: 'scripts/get-kernels.sh', dest: '/root/build/scripts/get-kernels.sh', mode: '0755' }
      tags: build_setup

    - name: Build the Docker image
      community.docker.docker_image:
        name: "{{ docker_image_name }}"
        build:
          path: /root/build
          args:
            EL_MINOR_VERSION: "{{ el_minor_version }}"
        source: build
        state: present
      tags: build_image

    - name: Stop and remove the old Docker container if it exists
      shell: >
        docker rm -f {{ docker_container_name }}
      register: remove_container
      failed_when: remove_container.rc != 0 and "No such container" not in remove_container.stderr
      changed_when: "not ('No such container' in remove_container.stderr)"
      tags: build_image

    - name: Run the Docker container
      shell: >
        docker run --name {{ docker_container_name }} {{ docker_image_name }}
      register: container_run
      failed_when: "'Error' in container_run.stdout or 'Error' in container_run.stderr"
      changed_when: "'Successfully' in container_run.stdout"
      tags: build_image

    - name: Create the output directory
      file:
        path: "{{ output_directory }}"
        state: directory
      tags: build_image

    - name: Copy build artifacts from container
      shell: >
        docker cp {{ docker_container_name }}:/root/output/. {{ output_directory }}/
      tags: build_image

    - name: Remove the Docker container
      shell: >
        docker rm -f {{ docker_container_name }}
      ignore_errors: yes
      tags: build_image

    - name: Display build report
      shell: cat {{ output_directory }}/build_report.md
      register: build_report
      tags: build_image

    - name: Show build report
      debug:
        msg: "{{ build_report.stdout_lines }}"
      tags: build_image

    - name: List RPM files
      find:
        paths: "{{ output_directory }}/RPMS/x86_64"
        patterns: "*.rpm"
      register: rpm_files
      tags: build_image

    - name: Show built RPMs
      debug:
        msg: "{{ item.path | basename }}"
      loop: "{{ rpm_files.files }}"
      tags: build_image