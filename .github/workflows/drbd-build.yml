name: DRBD Kernel Module Builder

on:
  schedule:
    - cron: '0 */12 * * *'  # Run every 12 hours
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new kernel version'
        type: boolean
        default: false
      el_minor_version:
        description: 'EL Minor Version (e.g., 5 for el9_5)'
        type: string
        default: '5'
  push:
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - '.github/workflows/drbd-build.yml'
      - '.kernel-versions'
      - '**.sh'

jobs:
  check-kernel-versions:
    runs-on: ubuntu-latest
    outputs:
      kernel_changed: ${{ steps.check-versions.outputs.kernel_changed }}
      kernel_versions: ${{ steps.check-versions.outputs.kernel_versions }}
      
    steps:
      - name: Download DRBD SRPM
        run: |
          SRPM_URL="https://elrepo.org/linux/elrepo/el9/SRPMS/kmod-drbd9x-9.1.23-1.el9_${{ github.event.inputs.el_minor_version || '5' }}.elrepo.src.rpm"
          echo "Downloading SRPM from: $SRPM_URL"
          curl -L -o drbd.src.rpm "$SRPM_URL"
          if [ $? -ne 0 ]; then
            echo "Failed to download SRPM"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest kernel versions
        id: check-versions
        run: |
          # Debug output
          echo "Building version-checker..."
          docker build \
            --target version-checker \
            --build-arg EL_MINOR_VERSION=${{ github.event.inputs.el_minor_version || '5' }} \
            -t kernel-checker .
          
          echo "Getting current versions..."
          CURRENT_VERSIONS=$(docker run --rm kernel-checker /usr/local/bin/get-kernels.sh)
          echo "Current versions: $CURRENT_VERSIONS"
          
          # Get previously built versions
          PREV_VERSIONS=""
          if [ -f ".kernel-versions" ]; then
            PREV_VERSIONS=$(cat .kernel-versions)
            echo "Previous versions: $PREV_VERSIONS"
          else
            echo "No previous versions file found"
          fi
          
          # Compare versions
          if [ "$CURRENT_VERSIONS" != "$PREV_VERSIONS" ] || [ "${{ github.event.inputs.force_build }}" == "true" ]; then
            echo "Changes detected or force build enabled"
            echo "kernel_changed=true" >> $GITHUB_OUTPUT
            echo "kernel_versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT
            echo "$CURRENT_VERSIONS" > .kernel-versions
          else
            echo "No changes detected and force build not enabled"
            echo "kernel_changed=false" >> $GITHUB_OUTPUT
            echo "kernel_versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-kernel-versions
    if: needs.check-kernel-versions.outputs.kernel_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: drbd-builder:latest
          build-args: |
            EL_MINOR_VERSION=${{ github.event.inputs.el_minor_version || '5' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run DRBD build
        run: |
          echo "${{ needs.check-kernel-versions.outputs.kernel_versions }}" > kernel_versions.txt
          docker run --name drbd-builder \
            -v $(pwd)/kernel_versions.txt:/tmp/kernel_versions.txt \
            drbd-builder
          
          mkdir -p output
          docker cp drbd-builder:/root/output/. output/
          docker rm drbd-builder

      - name: Generate build report
        run: |
          {
            echo "# DRBD Kernel Module Build Report"
            echo "## Build Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "## Kernel Versions:"
            echo "${{ needs.check-kernel-versions.outputs.kernel_versions }}" | sed 's/^/- /'
            echo -e "\n## Built Modules:"
            find output/RPMS -type f -name "*.rpm" -exec basename {} \; | sed 's/^/- /'
          } > output/build_report.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.run_number }}
          name: Build ${{ github.run_number }}
          body_path: output/build_report.md
          files: |
            output/RPMS/x86_64/*.rpm
          draft: false
          prerelease: false

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: drbd-rpms
          path: |
            output/RPMS/x86_64/*.rpm
            output/build_report.md
          retention-days: 7

      - name: Update kernel versions file
        if: success()
        run: |
          echo "${{ needs.check-kernel-versions.outputs.kernel_versions }}" > .kernel-versions
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .kernel-versions
          git commit -m "Update kernel versions [skip ci]"
          git push

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Build failed: Kernel modules build on ${new Date().toISOString().split('T')[0]}`,
              body: `Build failed for kernel versions:\n${process.env.KERNEL_VERSIONS}\n\nSee workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            }); 