name: DRBD Kernel Module Builder

on:
  schedule:
    - cron: '0 */12 * * *'  # Run every 12 hours
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new kernel version'
        type: boolean
        default: false
      el_minor_version:
        description: 'EL Minor Version (e.g., 5 for el9_5)'
        type: string
        default: '6'
  push:
    paths:
      - 'Dockerfile'
      - 'scripts/**'
      - '.github/workflows/drbd-build.yml'
      - '.kernel-versions'
      - '**.sh'

env:
  EL_MINOR_VERSION: ${{ github.event.inputs.el_minor_version || '6' }}
  FORCE_BUILD: ${{ github.event.inputs.force_build || 'false' }}

jobs:
  check-kernel-versions:
    runs-on: ubuntu-latest
    outputs:
      kernel_changed: ${{ steps.check-versions.outputs.kernel_changed }}
      kernel_versions: ${{ steps.check-versions.outputs.kernel_versions }}
      
    steps:
      - name: Download DRBD SRPM
        run: |
          SRPM_URL="https://elrepo.org/linux/elrepo/el9/SRPMS/kmod-drbd9x-9.2.13-5.el9_${EL_MINOR_VERSION}.elrepo.src.rpm"
          echo "Downloading SRPM from: $SRPM_URL"
          curl -L -o drbd.src.rpm "$SRPM_URL"
          if [ $? -ne 0 ]; then
            echo "Failed to download SRPM"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest kernel versions
        id: check-versions
        run: |
          echo "Building version-checker for EL minor: ${EL_MINOR_VERSION}"
          docker build \
            --target version-checker \
            --build-arg EL_MINOR_VERSION=${EL_MINOR_VERSION} \
            -t kernel-checker .
          
          echo "Getting current versions..."
          CURRENT_VERSIONS=$(docker run --rm kernel-checker /usr/local/bin/get-kernels.sh)
          echo "Current versions: $CURRENT_VERSIONS"
          
          PREV_VERSIONS=""
          if [ -f ".kernel-versions" ]; then
            PREV_VERSIONS=$(cat .kernel-versions)
            echo "Previous versions: $PREV_VERSIONS"
          else
            echo "No previous versions file found"
          fi
          
          if [ "$CURRENT_VERSIONS" != "$PREV_VERSIONS" ] || [ "${FORCE_BUILD}" == "true" ]; then
            echo "kernel_changed=true" >> $GITHUB_OUTPUT
            echo "kernel_versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT
            echo "$CURRENT_VERSIONS" > .kernel-versions
          else
            echo "kernel_changed=false" >> $GITHUB_OUTPUT
            echo "kernel_versions=$CURRENT_VERSIONS" >> $GITHUB_OUTPUT
          fi
